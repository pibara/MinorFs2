#!/usr/bin/python
import hashlib
import base64
import os
import stat
class Lookup:
    def __init__(self,rawstorage,salt):
        self.rawstorage = rawstorage
        self.salt=salt
    def __call__(self,accesstoken,relpath,succeedcreatable):
        #A valid basecap is 55 characters long.
        if len(accesstoken) != 55:
            return None
        #The access token starts with either 'rw-' or 'ro-'
        mode=accesstoken[:2]
        #The rest is the base32 representation of a 256 bit key.
        basecapb32=accesstoken[3:]
        #Turn it into a raw 256 bit key.
        basecapraw=base64.b32decode(basecapb32 + "====")
        #Initialize the base keys to None.
        rwcap=None
        rocap=None
        cryptokey=None
        if (mode=='rw'):
            #If its a read only token, remember that
            readonly = False
            #Remember the base32 key as rw-cap
            rwcap=accesstoken
            #Calculate the crypto-key key from the raw read/write key and our secret salt.
            cryptokey = str(hashlib.sha256(basecapraw + self.salt ).digest())
            #The read-only key is the base32 of the crypto-key.
            rocap = "ro-" + base64.b32encode(cryptokey)[:52]
        elif (mode=='ro'):
            #If its a read/write access token, remember that.
            readonly = True
            #The crypto-key is the raw basecap.
            cryptokey== basecapraw
            #The supplied basecap is our read only cap.
            rocap=accesstoken
        else:
            #Anything else is bogus.
            return None
        #Set parentrocap to None in case whe have an empty relpath.
        parentcryptokey=None
        for subnodename in relpath.split("/"):
            #Remember the last parent cryptokey, we may need it later on.
            parentcryptokey=cryptokey
            #Calculate all relevant caps from the parent ro cap and the subnode name.
            rwkey=str(hashlib.sha256( parentcryptokey + self.salt + subnodename ).digest())
            cryptokey=str(hashlib.sha256( rwkey + self.salt ).digest())
        #Now first look at the leaf node only, calculate the storage key, storage path and check it it exists.
        storagekey = base64.b32encode(str(hashlib.sha256(cryptokey + self.salt ).digest()))[:52]  
        storagepath = "/" + storagekey[:2] + "/" + storagekey[2:4] + "/" + storagekey[4:]      
        basenode = self.rawstorage.pathToNode(storagepath)
        if not basenode.exists():
            if succeedcreatable:
                #If it does not exist, that might be OK if the succeedcreatable function argument is set.
                if parentrocap:
                    #If we do have a parent node but our current node does not exist and is directory,than at least our parent node MUST exist.
                    parentstoragekey = base64.b32encode(str(hashlib.sha256(parentcryptokey + self.salt ).digest()))[:52]
                    parentstoragepath = "/" + parentstoragekey[:2] + "/" + parentstoragekey[2:4] + "/" + parentstoragekey[4:]
                    parentbasenode = self.rawstorage.pathToNode(parentstoragepath)
                    if not parentbasenode.isDir():
                        #If it doesn't, the whole path must be bogus.
                        return None
            else:
                return None
        #If relpath wasn't empty, calculate the new base32 versions of the relevant keys.
        if not parentcryptokey == None:
            rwcap="rw-" + base64.b32encode(rwkey)[:52]
            rocap="ro-" + base64.b32encode(cryptokey)[:52]
        #Now set the crypto key and the read only flag for the node before we return it.
        if readonly:
            basenode.setMeta(None,rocap,cryptokey)
        else:
            basenode.setMeta(rwcap,rocap,cryptokey)
        return basenode

class Node:
    def __init__(self,rootdir,relpath):
        self.initialized=False
        self.exists=False
        self.nodetype=0
        fullpath=rootdir + relpath
        if os.path.exists(fullpath):
            self.exists=True
            #Fixme: explain this
            self.nodetype = (os.stat(fullpath).st_mode & 070) >> 3
    def exists(self):
        return self.exists
    def isFile(self):
        return self.nodetype==4
    def isDir(self):
        return self.nodetype==6
    def isLink(self):
        return self.nodetype==7
    def setMeta(self,rwcap,rocap,cryptokey):
        if not self.initialized:
            self.initialized = True
            self.rwcap=rwcap
            self.rocap=rocap
            self.cryptokey=cryptokey
        return
    def createAsDir(self):
        pass
    def createAsLink(self,old):
        pass

class RootDir:
    def __init__(self,rootdir):
        self.rootdir=rootdir
    def pathToNode(self,relpath):
        return StorageNode(self.rootdir,relpath)
