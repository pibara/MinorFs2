//  Copyright (c) 2012, Rob J Meijer
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license (the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third-parties to whom the Software is furnished to
//do so, all subject to the following:
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine-executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.
#ifndef MINORFS_CAPFS_BASENODE_HPP
#define MINORFS_CAPFS_BASENODE_HPP
#include <string>
#include <inttypes.h>
#define FUSE_USE_VERSION 26
#include <fuse.h>
#include <sys/stat.h>
#include <errno.h>
#include "../algo/TripleHashParentChild.hpp"
namespace capfs {
namespace fs {
class BaseNode;
class BaseNode {
    bool mAccess;
    std::string mRelPath;
    capfs::algo::TripleHashParentChild mParentChild;
  public:
    BaseNode();
    BaseNode(std::string relpath);
    BaseNode(capfs::algo::TripleHashParentChild pc);
    int stat(struct stat *s);
    int readlink(char *b, size_t l);
    int mknod(mode_t m, dev_t d); 
    int mkdir(mode_t m,bool cancreateroot); 
    int unlink(); 
    int rmdir();
    int symlink(std::string l); 
    int rename(BaseNode l); 
    int link(BaseNode l); 
    int chmod(mode_t m); 
    int truncate(off_t off); 
    int getxattr(const char *n, char *v, size_t s);  
    int listxattr(char *l, size_t s);
    int access(int m);
    int bmap(size_t blocksize, uint64_t *idx);
    int open(uint64_t *fh,int flags);
    int opendir(uint64_t *fh);
    int create(uint64_t *fh,mode_t m);
};
}
}
#endif
